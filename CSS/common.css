/* 이것도 common.js와 같이 원래는 main.css에서 작성된 것이나, signin 브랜치를 만든 후에 그 브랜치에서도 사용하는 것들을 common으로 가져온 것 */

/* COMMON */

body {
  color: #333;
  font-size: 16px;
  font-weight: 400;
  line-height: 1.4;
  font-family: 'Nanum Gothic', sans-serif;
}
img {
  display: block; /* 이미지 밑에 공간이 생기는 것을 없애는 방법*/ 
}
a {
  text-decoration: none;
}
.inner {
  width: 1100px;
  margin: 0 auto;
  position: relative;
}
.btn {
  width: 130px;
  padding: 10px;
  border: 2px solid #333;
  border-radius: 4px;
  color: #333;
  font-size: 16px;
  font-weight: 700;
  text-align: center;
  cursor: pointer;
  box-sizing: border-box;
  display: block;
  transition: .4s;
}
.btn:hover {
  background-color: #333;
  color: #fff;
}
.btn.btn--reverse {
  background-color: #333;
  color: #fff;
}
.btn.btn--reverse:hover {
  background-color: transparent;
  color: #333;
}
.btn.btn--brown {
  color: #592B18;
  border-color: #592B18;
}
.btn.btn--brown:hover {
  color: #fff;
  background-color: #592b18;
}
.btn.btn--gold {
  color: #D9AA8A;
  border-color: #D9AA8A;
}
.btn.btn--gold:hover {
  color: #fff;
  border-color: #fff;
}
.btn.btn--white {
  color: #fff;
  border-color: #fff;
}
.btn.btn--white:hover {
  color: #333;
  background-color: #fff;
}
.back-to-position {
  opacity: 0;
  transition: 1s;
}
.back-to-position.to-right {
  transform: translateX(-150px); /* 왼쪽으로 이동하는 개념이지만 왼쪽으로 이동한 후 돌아오는 개념이라면 왼쪽에서 오른쪽으로 가는 개념처럼 보일 것.*/
}
.back-to-position.to-left {
  transform: translateX(150px);
}
.show .back-to-position {
  opacity: 1;
  transform: translateX(0 );
}
.show .back-to-position.delay-0 {
  transition-delay: 0s;
}
.show .back-to-position.delay-1 {
  transition-delay: .3s;  
}
.show .back-to-position.delay-2 {
  transition-delay: .6s;   
}
.show .back-to-position.delay-3 {
  transition-delay: .9s;  
}
/* Delay는 한 꺼번에 나타나니 너무 심심해서 적용하는 것*/


/* HEADER */

header {
  background-color: #f6f5f0;
  border-bottom: 1px solid #c8c8c8;
  /* position: relative; 이건 뱃지의 기준이 되기 위해 사용했으나 fixed를 써도 같은 효과를 얻을 수 있음. */
  position: fixed;
  top: 0;
  /* 이 상태만으로 간다면 뷰포트 기준으로 배치되므로 width는 auto가 기본값인데 요소의 너비를 최대한이 아닌 최소한으로 사용하고자 함.*/
  /* 이런 현상은 position fixed와 absolute에서 적용되는 것. width가 최소한으로 간다는 것. 원래 div라면 최대한으로 가지만 이 점에서는 최소한으로 간다는 점을 유의해야 한다.*/ 
  /* 일단 이렇게 fixed 하는 이유는 스크롤로 뷰포트를 내린다 해도 그 위에 고정되도록 하기 위함 */
  width: 100%;
  /* 이렇게 100%를 넣어줘야 fixed된 뷰포트 화면 전체를 다 사용할 수 있는 것 */
  z-index: 9;
}
header > .inner {
  /* width: 1100px; */
  height: 120px;
  /* margin: 0 auto; 가운데 정렬하는 방법 */
  /* background-color: orange; 이건 각 구역 구별하기 위해서 잠시 사용한 것  */
  /* position: relative; 현재 이 부분들은 common에다가 모두 적어줬으므로 이제 쓰지 않아도 되는 것*/
}
header .logo {
  height: 75px;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0; 
  margin: auto;
  /* 로고를 수직 중앙에 배치하는 방법 */
  /* display: none; 이건 로고가 방해가 될 때 사용 */
}
header .sub-menu {
  position: absolute;
  top: 10px;
  right: 0;
  display: flex;
}
header .sub-menu ul.menu {
  display: flex;
  font-family: Arial, sans-serif ;
}
header .sub-menu ul.menu li {
  position: relative;
}
header .sub-menu ul.menu li::before {
  content: ""; /* before, after를 쓰기 위해서는 안에 콘텐츠를 넣지 않는다 해도 content: "";를 해야 기능한다. */
  /* display: block; 이거는 Position을 사용하면 자동으로 됨 */
  width: 1px;
  height: 12px;
  background-color: #e5e5e5;
  position: absolute;
  top: 0;
  bottom: 0;
  margin: auto;
}
/* 이거는 현재 구분선을 만들기 위함 */
header .sub-menu ul.menu li:first-child::before {
  display: none;
}
header .sub-menu ul.menu li a{
  /* background-color: white; 이렇게 하는 이유는 이 영역을 누를 때 링크 타고 넘어 가도록 하기 위함. Ul 디자인. 그걸 가시적으로 확인하면서 코딩하기 위함 */
  font-size: 12px;
  padding: 11px 16px; 
  display: block; 
  color: #656565;
}
header .sub-menu ul.menu li a:hover{
  color: #000;
}
header .sub-menu .search {
  /* background-color: red; 구역을 확인하면서 보기 위함 */
  height: 34px;
  position: relative;
}
header .sub-menu .search input {
  width: 36px;
  height: 34px;
  padding: 4px 10px;
  border: 1px solid #ccc;
  box-sizing: border-box;
  border-radius: 5px;
  outline: none;
  background-color: #fff;
  color: #777777; /* 내부 폰트 컬러 */
  font-size: 12px;
  transition: width .4s;
}
header .sub-menu .search input:focus {
  width: 190px;
  border-color: #669900;
}
header .sub-menu .search .material-icons {
  height: 24px;
  position: absolute;
  top: 0;
  bottom: 0;
  right: 5px;
  margin: auto;
  transition: .4s; /* 이건 focused가 될 때의 transition*/
}
header .sub-menu .search.focused .material-icons {
  opacity: 0;
}
/* .focused 추가는 js에서 함수로 부여해준 classlist임. 추가적인 css작업이 가능하도록 만든 것 */
header .main-menu {
  position: absolute;
  bottom: 0;
  right: 0;
  z-index: 1; /* 메인 메뉴를 hover했을 때 뱃지의 영역까지 모두 덮을 수 있도록 설정하는 것 */
  display: flex;
}
header .main-menu .item {
  
}
header .main-menu .item .item__name {
  padding: 10px 20px 34px;
  font-family: Arial, sans-serif;
  font-size: 13px;
}
header .main-menu .item:hover .item__name {
  background-color: #2c2a29;
  color: #669900;
  border-radius: 6px 6px 0 0 ; /* 좌상단 우상단에만 6px씩 깎은 것  */
}
/* main-menu 안에 있는 item 태그 모두를 건들면 반응하도록 함 .item__name 뿐만 아니라 __contents에도 영향을 주는 것 */
header .main-menu .item .item__contents {
  width: 100%;
  position: fixed; /* position: absolute;를 사용했다면 부모 요소를 기준으로 하므로, 화면 뷰포트의 좌우 끝까지를 사용할 수 없었을 것. 뷰포트를 기준으로 100% 잡아주는 것이 맞음 */
  left: 0;
  display: none;
}
header .main-menu .item:hover .item__contents {
  display:block
}
header .main-menu .item .item__contents .contents__menu {
  background-color: #2c2a29;
}
header .main-menu .item .item__contents .contents__menu > ul{
  display: flex;
  padding: 20px 0;
}
header .main-menu .item .item__contents .contents__menu > ul > li {
  width: 220px;
}
header .main-menu .item .item__contents .contents__menu > ul > li h4 {
  padding: 3px 0 12px;
  font-size: 14px;
  color: #fff;
}
header .main-menu .item .item__contents .contents__menu > ul > li ul li {
  padding: 5px 0;
  font-size: 12px;
  color: #999;
  cursor: pointer;
}
header .main-menu .item .item__contents .contents__menu > ul > li ul li:hover {
  color: #669900;
}
header .main-menu .item .item__contents .contents__texture { 
  padding: 26px 0;
  font-size: 12px;
  background-image: url("../images/main_menu_pattern.jpg"); /* 알아서 repeat됨*/
}
header .main-menu .item .item__contents .contents__texture h4 {
  color: #999;
  font-weight: 700;
  font-size: 12px;
}
header .main-menu .item .item__contents .contents__texture p {
  color: #669900;
  margin: 4px 0 14px;
}
header .badges {
  position: absolute;
  top: 132px;
  right: 12px;
}
header .badges .badge {
  border-radius: 10px;
  overflow: hidden; /* border-radius로 모서리를 깎았으나 이미지를 깎은 것은 아님. border보다 넘치는 img 부분을 감추기 위해서 사용함*/
  margin-bottom: 12px;
  box-shadow: 4px 4px 10px rgba(0, 0, 0, .15);
  /* box-shadow: x축, y축, blur, 색상; */
  cursor: pointer;
}

/* FOOTER */

footer {
  background-color: #272727;
  border-top: 1px solid #333;
}
footer .inner {
  padding: 40px 0 60px 0;
}
footer .menu {
  display: flex;
  justify-content: center;
}
footer .menu li {
  position: relative;
}
footer .menu li::before {
  content: "";
  width: 3px;
  height: 3px;
  background-color: #555;
  position: absolute; /* before는 display가 inline요소라서 width나 height값이 안먹는다. 하지만, position값이 있으면 자동으로 display가 block으로 들어가기 때문에 굳이 적지 않아도 된다. */
  top: 0;
  bottom: 0;
  right: -1px;
  margin: auto;
}
footer .menu li:last-child::before {
  display: none;
}
footer .menu li a {
  color: #ccc;
  font-size: 12px;
  font-weight: 700;
  padding: 15px;
  display: block; /* a는 인라인 요소라서 바꿔줘야 함 */  
}
footer .menu li a.green {
  color: #669900;
}
footer .btn-group {
  margin-top: 20px;
  display: flex;
  justify-content: center;
}
footer .btn-group .btn {
  font-size: 12px;
  margin-right: 10px;
}
footer .btn-group .btn:last-child {
  margin-right: 0;
}
footer .info {
  margin-top: 30px;
  text-align: center;
}
footer .info span {
  margin-right: 20px;
  color: #999;
  font-size: 12px;
}
footer .info span:last-child {
  margin-right: 0;
}
footer .copyright {
  color: #999;
  font-size: 12px;
  text-align: center;
  margin-top: 12px;
}
footer .logo {
  margin: 30px auto 0; 
  /* width가 필요한데, 가운데 정렬이 가능함. 그것은 logo가 이미지 요소기 때문. 이미지를 출력하는 가로 너비가 자동으로 있기 때문*/
  /* img요소는 display: block; + margin: 0 auto; 일 때 width 속성 없이도 가운데 정렬이 가능하다. 지금 우리 img에는 display: block;이 있음*/
}