/* COMMON */

body {
  color: #333;
  font-size: 16px;
  font-weight: 400;
  line-height: 1.4;
  font-family: 'Nanum Gothic', sans-serif;
}
img {
  display: block; /* 이미지 밑에 공간이 생기는 것을 없애는 방법*/ 
}
a {
  text-decoration: none;
}
.inner {
  width: 1100px;
  margin: 0 auto;
  position: relative;
}
.btn {
  width: 130px;
  padding: 10px;
  border: 2px solid #333;
  border-radius: 4px;
  color: #333;
  font-size: 16px;
  font-weight: 700;
  text-align: center;
  cursor: pointer;
  box-sizing: border-box;
  display: block;
  transition: .4s;
}
.btn:hover {
  background-color: #333;
  color: #fff;
}
.btn.btn--reverse {
  background-color: #333;
  color: #fff;
}
.btn.btn--reverse:hover {
  background-color: transparent;
  color: #333;
}
.btn.btn--brown {
  color: #592B18;
  border-color: #592B18;
}
.btn.btn--brown:hover {
  color: #fff;
  background-color: #592b18;
}
.btn.btn--gold {
  color: #D9AA8A;
  border-color: #D9AA8A;
}
.btn.btn--gold:hover {
  color: #fff;
  border-color: #fff;
}
.btn.btn--white {
  color: #fff;
  border-color: #fff;
}
.btn.btn--white:hover {
  color: #333;
  background-color: #fff;
}
.back-to-position {
  opacity: 0;
  transition: 1s;
}
.back-to-position.to-right {
  transform: translateX(-150px); /* 왼쪽으로 이동하는 개념이지만 왼쪽으로 이동한 후 돌아오는 개념이라면 왼쪽에서 오른쪽으로 가는 개념처럼 보일 것.*/
}
.back-to-position.to-left {
  transform: translateX(150px);
}
.show .back-to-position {
  opacity: 1;
  transform: translateX(0 );
}
.show .back-to-position.delay-0 {
  transition-delay: 0s;
}
.show .back-to-position.delay-1 {
  transition-delay: .3s;  
}
.show .back-to-position.delay-2 {
  transition-delay: .6s;   
}
.show .back-to-position.delay-3 {
  transition-delay: .9s;  
}
/* Delay는 한 꺼번에 나타나니 너무 심심해서 적용하는 것*/


/* HEADER */

header {
  background-color: #f6f5f0;
  border-bottom: 1px solid #c8c8c8;
  /* position: relative; 이건 뱃지의 기준이 되기 위해 사용했으나 fixed를 써도 같은 효과를 얻을 수 있음. */
  position: fixed;
  top: 0;
  /* 이 상태만으로 간다면 뷰포트 기준으로 배치되므로 width는 auto가 기본값인데 요소의 너비를 최대한이 아닌 최소한으로 사용하고자 함.*/
  /* 이런 현상은 position fixed와 absolute에서 적용되는 것. width가 최소한으로 간다는 것. 원래 div라면 최대한으로 가지만 이 점에서는 최소한으로 간다는 점을 유의해야 한다.*/ 
  /* 일단 이렇게 fixed 하는 이유는 스크롤로 뷰포트를 내린다 해도 그 위에 고정되도록 하기 위함 */
  width: 100%;
  /* 이렇게 100%를 넣어줘야 fixed된 뷰포트 화면 전체를 다 사용할 수 있는 것 */
  z-index: 9;
}
header > .inner {
  /* width: 1100px; */
  height: 120px;
  /* margin: 0 auto; 가운데 정렬하는 방법 */
  /* background-color: orange; 이건 각 구역 구별하기 위해서 잠시 사용한 것  */
  /* position: relative; 현재 이 부분들은 common에다가 모두 적어줬으므로 이제 쓰지 않아도 되는 것*/
}
header .logo {
  height: 75px;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0; 
  margin: auto;
  /* 로고를 수직 중앙에 배치하는 방법 */
  /* display: none; 이건 로고가 방해가 될 때 사용 */
}
header .sub-menu {
  position: absolute;
  top: 10px;
  right: 0;
  display: flex;
}
header .sub-menu ul.menu {
  display: flex;
  font-family: Arial, sans-serif ;
}
header .sub-menu ul.menu li {
  position: relative;
}
header .sub-menu ul.menu li::before {
  content: ""; /* before, after를 쓰기 위해서는 안에 콘텐츠를 넣지 않는다 해도 content: "";를 해야 기능한다. */
  /* display: block; 이거는 Position을 사용하면 자동으로 됨 */
  width: 1px;
  height: 12px;
  background-color: #e5e5e5;
  position: absolute;
  top: 0;
  bottom: 0;
  margin: auto;
}
/* 이거는 현재 구분선을 만들기 위함 */
header .sub-menu ul.menu li:first-child::before {
  display: none;
}
header .sub-menu ul.menu li a{
  /* background-color: white; 이렇게 하는 이유는 이 영역을 누를 때 링크 타고 넘어 가도록 하기 위함. Ul 디자인. 그걸 가시적으로 확인하면서 코딩하기 위함 */
  font-size: 12px;
  padding: 11px 16px; 
  display: block; 
  color: #656565;
}
header .sub-menu ul.menu li a:hover{
  color: #000;
}
header .sub-menu .search {
  /* background-color: red; 구역을 확인하면서 보기 위함 */
  height: 34px;
  position: relative;
}
header .sub-menu .search input {
  width: 36px;
  height: 34px;
  padding: 4px 10px;
  border: 1px solid #ccc;
  box-sizing: border-box;
  border-radius: 5px;
  outline: none;
  background-color: #fff;
  color: #777777; /* 내부 폰트 컬러 */
  font-size: 12px;
  transition: width .4s;
}
header .sub-menu .search input:focus {
  width: 190px;
  border-color: #669900;
}
header .sub-menu .search .material-icons {
  height: 24px;
  position: absolute;
  top: 0;
  bottom: 0;
  right: 5px;
  margin: auto;
  transition: .4s; /* 이건 focused가 될 때의 transition*/
}
header .sub-menu .search.focused .material-icons {
  opacity: 0;
}
/* .focused 추가는 js에서 함수로 부여해준 classlist임. 추가적인 css작업이 가능하도록 만든 것 */
header .main-menu {
  position: absolute;
  bottom: 0;
  right: 0;
  z-index: 1; /* 메인 메뉴를 hover했을 때 뱃지의 영역까지 모두 덮을 수 있도록 설정하는 것 */
  display: flex;
}
header .main-menu .item {
  
}
header .main-menu .item .item__name {
  padding: 10px 20px 34px;
  font-family: Arial, sans-serif;
  font-size: 13px;
}
header .main-menu .item:hover .item__name {
  background-color: #2c2a29;
  color: #669900;
  border-radius: 6px 6px 0 0 ; /* 좌상단 우상단에만 6px씩 깎은 것  */
}
/* main-menu 안에 있는 item 태그 모두를 건들면 반응하도록 함 .item__name 뿐만 아니라 __contents에도 영향을 주는 것 */
header .main-menu .item .item__contents {
  width: 100%;
  position: fixed; /* position: absolute;를 사용했다면 부모 요소를 기준으로 하므로, 화면 뷰포트의 좌우 끝까지를 사용할 수 없었을 것. 뷰포트를 기준으로 100% 잡아주는 것이 맞음 */
  left: 0;
  display: none;
}
header .main-menu .item:hover .item__contents {
  display:block
}
header .main-menu .item .item__contents .contents__menu {
  background-color: #2c2a29;
}
header .main-menu .item .item__contents .contents__menu > ul{
  display: flex;
  padding: 20px 0;
}
header .main-menu .item .item__contents .contents__menu > ul > li {
  width: 220px;
}
header .main-menu .item .item__contents .contents__menu > ul > li h4 {
  padding: 3px 0 12px;
  font-size: 14px;
  color: #fff;
}
header .main-menu .item .item__contents .contents__menu > ul > li ul li {
  padding: 5px 0;
  font-size: 12px;
  color: #999;
  cursor: pointer;
}
header .main-menu .item .item__contents .contents__menu > ul > li ul li:hover {
  color: #669900;
}
header .main-menu .item .item__contents .contents__texture { 
  padding: 26px 0;
  font-size: 12px;
  background-image: url("../images/main_menu_pattern.jpg"); /* 알아서 repeat됨*/
}
header .main-menu .item .item__contents .contents__texture h4 {
  color: #999;
  font-weight: 700;
  font-size: 12px;
}
header .main-menu .item .item__contents .contents__texture p {
  color: #669900;
  margin: 4px 0 14px;
}
header .badges {
  position: absolute;
  top: 132px;
  right: 12px;
}
header .badges .badge {
  border-radius: 10px;
  overflow: hidden; /* border-radius로 모서리를 깎았으나 이미지를 깎은 것은 아님. border보다 넘치는 img 부분을 감추기 위해서 사용함*/
  margin-bottom: 12px;
  box-shadow: 4px 4px 10px rgba(0, 0, 0, .15);
  /* box-shadow: x축, y축, blur, 색상; */
  cursor: pointer;
}


/* VISUAL */

.visual {
  margin-top: 120px;
  background-image: url("../images/visual_bg.jpg");
  background-position: center;
}
/* header영역의 Height가 120px이라서 margin-top을 붙인 것 */
.visual .inner {
  height: 646px;
}
.visual .title {
  position: absolute;
  top: 88px;
  left: -10px;
}
.visual .title .btn {
  position: absolute;
  top: 259px;
  left: 173px;
}
.visual .cup1.image {
  position: absolute;
  bottom: 0;
  right: -47px;
}
.visual .cup1.text {
  position: absolute;
  top: 38px;
  right: 171px;
}
.visual .cup2.image {
  position: absolute;
  bottom: 0;
  right: 162px;
}
.visual .cup2.text {
  position: absolute;
  top: 321px;
  right: 416px;
}
.visual .spoon {
  position: absolute;
  bottom: 0;
  left: 275px;
}
.visual .fade-in {
  opacity: 0;
}


/* NOTICE */

.notice {

}
.notice .notice-line {
  position: relative;
}
.notice .notice-line .bg-left {
  position: absolute;
  top: 0;
  left: 0;
  width: 50%;
  height: 100%;
  background-color: #333;
}
.notice .notice-line .bg-right {
  position: absolute;
  top: 0;
  right: 0;
  width: 50%;
  height: 100%;
  background-color: #f6f5ef;
}
.notice .notice-line .inner {
  height: 62px;
  display: flex;
}
.notice .notice-line .inner__left {
  width: 60%;
  height: 100%;
  background-color: #333;
  display: flex;
  align-items: center;
}
.notice .notice-line .inner__left h2 {
  color: #fff;
  font-size: 17px;
  font-weight: 700;
  margin-right: 20px;
}
.notice .notice-line .inner__left .swiper-container {
  /* background-color: orange; */
  height: 62px;
  flex-grow: 1;
}
/* display: flex;가 주어지면, 그 안에 있는 item들은 height가 없을 때 최대한으로 늘어나려 한다 */
/* 그런데 align-items를 center로 맞추면 자동으로 최소화되고, 이것을 수정하기 위해 다시 height의 값을 지정하게 된다 */
/* flex-grow는 아이템들이 너비를 가지는 비율을 설정하는데 이것에만 1을 사용하면 나머지 형제 아이템들이 차지하고 남은 그 모든 영역을 얘가 가진다는 의미다. */
.notice .notice-line .inner__left .swiper-slide {
  height: 62px;
  display: flex;
  align-items: center;
}
.notice .notice-line .inner__left .swiper-slide a {
  color: #fff;
}
.notice .notice-line .inner__left .notice-line__more {
  width: 62px; 
  height: 62px;
  display: flex;
  justify-content: center;
  align-items: center; 
}
.notice .notice-line .inner__left .notice-line__more .material-icons {
  color: #fff;
  font-size: 30px;
}
.notice .notice-line .inner__right {
  width: 40%;
  height: 100%;
  display: flex;
  justify-content: flex-end;
  align-items: center;
}
.notice .notice-line .inner__right h2 {
  font-size: 17px;
  font-weight: 700;
}
.notice .notice-line .inner__right .toggle-promotion {
  width: 62px;
  height: 62px;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
}
.notice .notice-line .inner__right .toggle-promotion .material-icons {
  font-size: 30px;
}
.notice .promotion {
  height: 693px;
  background-color: #f6f5ef;
  position: relative;
  transition: height .4s;
  overflow: hidden; /* 이 처리를 해줘야지만이 내부에 있는 아이템들이 height가 되더라도 넘치지 않는다 */
}
.notice .promotion.hide /* 꼭, 일치 선택자로. class="promotion hide" promotion에 hide가 붙어 있는 경우임 */ {
  height: 0;

}
.notice .promotion .swiper-container {
  width: calc(819px * 3 + 20px); /*calc함수는 css에서 종종 사용하며 수기로 계산하지 않아도 되는 장점이 있다 100%-50px의 계산도 가능 */
  height: 553px;
  position: absolute;
  top: 40px; /* 이걸 사용하면 위에서 아래로 내려감 */
  left: 50%; /* 이걸 사용하니 50%만큼 오른쪽으로 가버림*/ 
  margin-left: calc((819px * 3 + 20px) / -2); /*  쪽 끝부터 오른쪽 끝까지 프로모션의 영역이 있고, 스와이퍼 컨테이너를 프로모션 영역 기준으로 정중앙 50%지점에 왼쪽 끝이 오도록 오른쪽으로 끌어 당김. 그리고 그 컨테이너의 절반만큼을 다시 왼쪽으로 끌어 당김. 이는 컨테이너의 중앙이 정중앙이 되는 것 기준이 되는 것 */
}
.notice .promotion .swiper-slide {
  opacity: .5;
  transition: opacity 1s;
  position: relative;
}
.notice .promotion .swiper-slide-active {
  opacity: 1;
}
/* 한 번에 여러 슬라이드를 보여줄 때(slidePerView) swiperjs에서는 메인이 되는 슬라이드에 자동으로 active를 준다.  */
.notice .promotion .swiper-slide .btn {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  margin: auto; /* 이렇게 가운데 정렬을 하기 위해서는 width 값이 지정돼 있어야 하고 그것은 COMMON 영역에서 설정돼 있다.*/
}
.notice .promotion .swiper-pagination {
  bottom: 40px;
  left: 0;
  right: 0;
}
/* .swiper-pagination은 swiperjs 에서 기본 스타일을 가져왔고 거기에 position 값이 이미 지정돼 있음 */
.notice .promotion .swiper-pagination .swiper-pagination-bullet {
  background-color: transparent;
  background-image: url("../images/promotion_slide_pager.png");
  width: 12px;
  height: 12px;
  margin-right: 6px;
  outline: none; /* focused 됐을 때 테두리가 생기는 것을 막는 것*/
}
/* bullet도 swiper-pagination 안에 있는 요소. 기본적인 세팅은 가져온 css에 있는 것. bullet은 페이지 번호.*/
.notice .promotion .swiper-pagination .swiper-pagination-bullet:last-child {
  margin-right: 0; /* 가장 오른쪽에 있는 것은 marign-right가 필요 없음을 나타내는 것*/
}
.notice .promotion .swiper-pagination .swiper-pagination-bullet-active {
  background-image: url("../images/promotion_slide_pager_on.png");
}
/* 활성화된 페이지 번호에 active가 자동으로 추가되도록 구성돼 있음. 그것을 이용해서 사용*/
.notice .promotion .swiper-prev, 
.notice .promotion .swiper-next { /*이런 방식을 다중 선택자라고 한다. 쉼표 꼭 사용하고 줄바꿈 처리를 해줘야 시각적으로 더 편리하다. */
  width: 42px;
  height: 42px;
  border: 2px solid #333;
  border-radius: 50%; /* 완전한 동그라미 */
  position: absolute;
  top: 300px;
  z-index: 1;
  cursor: pointer;
  outline: none;
  display: flex;
  justify-content: center;
  align-items: center;
  transition: .4s;
}
.notice .promotion .swiper-prev:hover, 
.notice .promotion .swiper-next:hover {
  background-color: #333;
  color: #fff;
}
.notice .promotion .swiper-prev {
  left: 50%;
  margin-left: -480px;
}
.notice .promotion .swiper-next {
  right: 50%;
  margin-right: -480px;
}


/* REWARDS */

.rewards {
  position: relative;
}
.rewards .bg-left {
  width: 50%;
  height: 100%;
  background-color: #272727;
  position: absolute;
  top: 0;
  left: 0;
}
.rewards .bg-right {
  width: 50%;
  height: 100%;
  background-color: #d5c798;
  position: absolute;
  top: 0;
  right: 0;
}
.rewards .inner {
  background-image: url("../images/rewards.jpg");
  height: 241px;
}
.rewards .btn-group {
  position: absolute; /* COMMON에 relative 있음 */
  bottom: 24px;
  right: 0;
  width: 250px;
  display: flex;
  flex-wrap: wrap; /* 수평으로 만드는데 가로너비 250보다 더 차지할 것 같으면 다음 줄로 넘기겠다는 의미 */
}
.rewards .btn-group .btn.sign-up {
  margin-right: 10px;
}
.rewards .btn-group .btn.sign-in {
  width: 110px;
}
.rewards .btn-group .btn.gift {
  margin-top: 10px;
  flex-grow: 1; 
}


/* YOUTUBE VIDEO */
.youtube {
  position: relative;
  height: 700px;
  background-color: #333;
  overflow: hidden;
}
.youtube .youtube__area {
  width: 1920px;
  background-color: orange;
  position: absolute;
  top: 50%;
  margin-top: calc(1920px * 9 / 16 / -2); /* 부모요소 기준으로(position: absolute;) 수직으로 정중앙에 배치하는 방법*/
  left: 50%;
  margin-left: calc(1920px / -2); /* 부모요소 기준으로 수평으로 정중앙에 배치하는 방법 */
}
.youtube .youtube__area::before /* 내용을 넣기 위한 것이 아니라 스타일(16:9 비율을 맞추는 것 등)을 위한 자식 요소가 필요할 경우 자식 요소를 만들기 보다 그냥 CSS선에서 ::before 만드는 게 좋다 */ {
  content: ""; 
  display: block; /* before는 인라인 요소 */
  width: 100%;
  height: 0;
  padding-top: 56.25%; /* 16:9 비율의 박스를 만드는 방법. padding top으로 그 비율에 맞춰서 변화되도록 유도하는 것 */
} 
.youtube .youtube__cover {
  background-image: url("../images/video_cover_pattern.png");
  background-color: rgba(0, 0, 0, .3);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
#player {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
}
.youtube .inner {
  height: 700px;
}
.youtube .floating1 {
  position: absolute;
  top: 50px;
  left: 0;
}
.youtube .floating2 {
  position: absolute;
  top: 350px;
  left: 150px;
}
/* .youtube .floating3 {
  position: absolute;
  bottom: -200px;
  right: 0;
} */
/* html 509번 줄과 여기까지만 작성한다면, .youtube로 css 지정한 것 중, overflow: hidden; 때문에 floating 3 이미지는 잘려서 출력된다. 
이것을 해결하는 방법은 아예 section을 다른 곳에 두는 것. 밑에 있는 부분이 잘렸으니 밑에서 올라갔다 내려갔다 하도록 하면 overflow가 걸리지 않는다. */ 


/* SEASON PRODUCT */

.season-product {
  background-image: url("../images/season_product_bg.jpg");
}
.season-product .inner {
  height: 400px;
}
.season-product .floating3 {
  position: absolute;
  top: -200px;
  right: 0;
}
.season-product .text-group {
  position: absolute;
  top: 110px;
  right: 100px;
}
.season-product .text-group .title {
  margin-bottom: 10px;

}
.season-product .text-group .description {
  margin-bottom: 15px;
}
.season-product .text-group .more {
  
}


/* RESERVE COFFEE */

.reserve-coffee {
  background-image: url("../images/reserve_bg.jpg"); 
}
.reserve-coffee .inner { 
  height: 400px;  
}
.reserve-coffee .reserve-logo {
  position: absolute;
  top: 110px;
  left: 0;
}
.reserve-coffee .text-group {
  position: absolute;
  top: 124px;
  left: 208px;
}
.reserve-coffee .product {
  position: absolute;
  top: 0;
  right: 0;
}


/* PICK YOUR FAVORITE */

.pick-your-favorite {
  background-image: url("../images/favorite_bg.jpg");
  background-repeat: no-repeat;
  background-position: center;
  background-attachment: fixed; /* 요소가 화면 위아래로 스크롤 될 때 요소가 더 스크롤 되지 않고 뷰포트에 고정되도록 하는 것 */
  background-size: cover; /* 뷰포트의 더 넓은 너비에 배경 이미지가 맞춰서 출력됨*/
}
.pick-your-favorite .inner {
  padding: 110px 0;
}
.pick-your-favorite .text-group {
  margin-left: 100px;
  width: 362px;
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-end;
}
.pick-your-favorite .text-group .title {
  margin-bottom: 40px;
}

.pick-your-favorite .text-group .description {
  margin-bottom: 40px;
}


/* RESERVE STORE */

.reserve-store {
  background-image: url("../images/reserve_store_bg.jpg");
  background-repeat: no-repeat;
  background-position: center;
  background-attachment: fixed;
  background-size: cover;
}
.reserve-store .inner {
  height: 600px;
  display: flex;
  justify-content: center;
  align-items: center;
}
.reserve-store .medal {
  width: 334px;
  height: 334px; /* front, back의 크기와 동일하게 해주지 않으면 이미지 없는 메달의 영역에서 hover될 수 있음 */
  perspective: 600px;
}
.reserve-store .medal .front,
.reserve-store .medal .back {
  position: absolute; /* absolute로 인해 부모 요소와의 연관만 갖고 형제들과의 연관을 갖지 않으므로 형제 둘이 겹치게 되는 효과를 얻는다. */
  width: 334px;
  height: 334px;
  backface-visibility: hidden; 
  transition: 1s;
}
.reserve-store .medal .front {
  transform: rotateY(0deg);
}
.reserve-store .medal:hover .front {
  transform: rotateY(180deg);
}
.reserve-store .medal .back { 
  transform: rotateY(-180deg);
}
.reserve-store .medal:hover .back {
  transform: rotateY(0deg);
}
.reserve-store .medal .back .btn {
  position: absolute;
  top: 240px;
  left: 0;
  right: 0;
  margin: auto; 
}


/* FIND THE STORE */

.find-store {
  background-image: url("../images/find_store_bg.jpg");
}
.find-store .inner {
  height: 400px;
}
.find-store .texture1 {
  position: absolute;
  top: 0;
  left: 400px;
} 
.find-store .texture2 {
  position: absolute;
  bottom: 0;
  right: 0;
}
.find-store .picture {
  position: absolute;
  border-radius: 50%;
  box-shadow: 2px 2px 8px rgba(0, 0, 0, .5);
}
.find-store .picture1 {
  top: -60px;
  left: 0;
} 
.find-store .picture2 {
  top: 150px;
  left: 250px;
}
.find-store .text-group {
  position: absolute;
  top: 120px;
  left: 550px;  
}
.find-store .text-group .title {
  margin-bottom: 20px;
}
.find-store .text-group .description {
  margin-bottom: 20px;
}


/* AWARDS */
.awards {
  background-color: #272727;
}
.awards .inner {
  padding: 40px 0;
}
.awards .swiper-container {
  width: 100%;
  height: 40px;
}
.awards .swiper-prev,
.awards .swiper-next {
  width: 42px;
  height: 42px;
  border: 2px solid #fff;
  border-radius: 50%;
  outline: none;
  color: #fff;
  opacity: .3;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  top: 0;
  bottom: 0;
  margin: auto; /* 이걸 사용하고 싶으면 width값이 꼭 있어야 한다 */ 
}
.awards .swiper-prev {
  left: -100px;
}
.awards .swiper-next {
  right: -100px;
}
.awards .swiper-prev:hover,
.awards .swiper-next:hover {
  background-color: #fff;
  color: #333 ;
}


/* FOOTER */

footer {
  background-color: #272727;
  border-top: 1px solid #333;
}
footer .inner {
  padding: 40px 0 60px 0;
}
footer .menu {
  display: flex;
  justify-content: center;
}
footer .menu li {
  position: relative;
}
footer .menu li::before {
  content: "";
  width: 3px;
  height: 3px;
  background-color: #555;
  position: absolute; /* before는 display가 inline요소라서 width나 height값이 안먹는다. 하지만, position값이 있으면 자동으로 display가 block으로 들어가기 때문에 굳이 적지 않아도 된다. */
  top: 0;
  bottom: 0;
  right: -1px;
  margin: auto;
}
footer .menu li:last-child::before {
  display: none;
}
footer .menu li a {
  color: #ccc;
  font-size: 12px;
  font-weight: 700;
  padding: 15px;
  display: block; /* a는 인라인 요소라서 바꿔줘야 함 */  
}
footer .menu li a.green {
  color: #669900;
}
footer .btn-group {
  margin-top: 20px;
  display: flex;
  justify-content: center;
}
footer .btn-group .btn {
  font-size: 12px;
  margin-right: 10px;
}
footer .btn-group .btn:last-child {
  margin-right: 0;
}
footer .info {
  margin-top: 30px;
  text-align: center;
}
footer .info span {
  margin-right: 20px;
  color: #999;
  font-size: 12px;
}
footer .info span:last-child {
  margin-right: 0;
}
footer .copyright {
  color: #999;
  font-size: 12px;
  text-align: center;
  margin-top: 12px;
}
footer .logo {
  margin: 30px auto 0; 
  /* width가 필요한데, 가운데 정렬이 가능함. 그것은 logo가 이미지 요소기 때문. 이미지를 출력하는 가로 너비가 자동으로 있기 때문*/
  /* img요소는 display: block; + margin: 0 auto; 일 때 width 속성 없이도 가운데 정렬이 가능하다. 지금 우리 img에는 display: block;이 있음*/
}


/* TO TOP */

#to-top {
  width: 42px;
  height: 42px;
  background-color: #333;
  color: #fff;
  border: 2px solid #fff;
  border-radius: 10px;
  cursor: pointer; 
  display: flex;
  justify-content: center;
  align-items: center;
  position: fixed;
  bottom: 30px;
  right: 30px;
  z-index: 9;
}
